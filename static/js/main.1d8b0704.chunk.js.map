{"version":3,"sources":["component/card/card.component.jsx","component/cardContiner/cardContiner.component.jsx","component/searchBox/search.component.jsx","component/scroll/scroll.component.jsx","component/errorBoundry/errorBoundry.jsx","App.js","action.js","type.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","name","email","className","src","alt","cardContainer","robots","map","robo","key","id","Search","handler","onChange","type","Scroll","children","style","height","overflowY","ErrorBoundry","state","isError","this","setState","props","Component","App","onRequestRobots","searchValue","onSearchValueChange","ispending","console","log","filteredRobots","filter","toLowerCase","includes","connect","searchReducer","fetchRobots","isPending","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","searchState","robotState","logger","createLogger","MiddleWares","thunkMiddleware","rootReducer","combineReducers","initial_State","action","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1d8b0704.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.style.css\";\r\n\r\nconst Card = ({ name, email }) => {\r\n  return (\r\n    <div className='card'>\r\n      <img src={`https://robohash.org/${name}`} alt='robo' />\r\n      <h2>{name}</h2>\r\n      <h4>{email}</h4>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./cardContainer.style.css\";\r\n\r\nimport Card from \"../card/card.component\";\r\nconst cardContainer = ({ robots }) => {\r\n  return (\r\n    <div className='card-container'>\r\n      {robots.map((robo) => (\r\n        <Card key={robo.id} name={robo.name} email={robo.email} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default cardContainer;\r\n","import React from \"react\";\r\nimport \"./search.style.css\";\r\nconst Search = ({ handler }) => {\r\n  return (\r\n    <div className='search-container'>\r\n      <img src='https://img.icons8.com/pastel-glyph/64/000000/search--v2.png' />\r\n      <input onChange={handler} type='text' />\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Scroll = ({ children }) => {\r\n  return <div style={{ height: \"80vh\", overflowY: \"scroll\" }}>{children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { isError: false };\r\n  }\r\n  componentDidCatch() {\r\n    this.setState({ isError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isError) {\r\n      return <h1>something went Wrong Error</h1>;\r\n    } else {\r\n      return <div>{this.props.children}</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport CardContainer from \"./component/cardContiner/cardContiner.component\";\nimport Search from \"./component/searchBox/search.component\";\nimport Scroll from \"./component/scroll/scroll.component\";\nimport ErrorBoundry from \"./component/errorBoundry/errorBoundry\";\nimport { connect } from \"react-redux\";\nimport { updateSearchField, requestRobots } from \"./action\";\n\nclass App extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     robots: [],\n  //   };\n  // }\n  async componentDidMount() {\n    // const result = await (\n    //   await fetch(\"https://jsonplaceholder.typicode.com/users\")\n    // ).json();\n\n    // this.setState({ robots: result });\n    this.props.onRequestRobots();\n  }\n  // onSearchValueChange = (event) => {\n  //   console.log(event.target.value);\n  //   this.setState({ searchValue: event.target.value });\n  // };\n  render() {\n    const { searchValue, onSearchValueChange, robots, ispending } = this.props;\n\n    if (ispending) {\n      return <h1>loading!!!</h1>;\n    } else {\n      console.log(robots);\n      const filteredRobots = robots.filter((robo) =>\n        robo.name.toLowerCase().includes(searchValue.toLowerCase())\n      );\n      return (\n        <div className='main-container'>\n          <h1>Robo Friends</h1>\n          <Search handler={onSearchValueChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardContainer robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\nconst mapStatetoProps = (state) => {\n  return {\n    searchValue: state.searchReducer.searchValue,\n    robots: state.fetchRobots.robots,\n    ispending: state.fetchRobots.isPending,\n  };\n};\nconst mapDispatchtoProps = (dispatch) => {\n  return {\n    onSearchValueChange: (event) =>\n      dispatch(updateSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\nexport default connect(mapStatetoProps, mapDispatchtoProps)(App);\n","import {\r\n  SEARCH_FIELD_VALUE,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./type\";\r\n\r\nexport const updateSearchField = (text) => {\r\n  return {\r\n    type: SEARCH_FIELD_VALUE,\r\n    payload: text,\r\n  };\r\n};\r\n// fetch(link).then(response => response.json())\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\r\n};\r\n","export const SEARCH_FIELD_VALUE = \"SEARCH_FIELD_VALUE\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  SEARCH_FIELD_VALUE,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./type\";\r\nconst searchState = {\r\n  searchValue: \"\",\r\n};\r\n\r\nexport const searchReducer = (initial_State = searchState, action) => {\r\n  switch (action.type) {\r\n    case SEARCH_FIELD_VALUE:\r\n      return { ...initial_State, searchValue: action.payload };\r\n\r\n    default:\r\n      return { ...initial_State };\r\n  }\r\n};\r\n\r\nconst robotState = {\r\n  robots: [],\r\n  isPending: true,\r\n  error: false,\r\n};\r\nexport const fetchRobots = (initial_State = robotState, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...initial_State, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...initial_State, isPending: false, robots: action.payload };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...initial_State, isPending: false, error: true };\r\n    default:\r\n      return { ...initial_State };\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { searchReducer, fetchRobots } from \"./reducer\";\nimport { applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nconst logger = createLogger();\nconst MiddleWares = [thunkMiddleware, logger];\nconst rootReducer = combineReducers({ searchReducer, fetchRobots });\nconst store = createStore(rootReducer, applyMiddleware(...MiddleWares));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}